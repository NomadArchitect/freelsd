#ifndef FREELSD_KERNEL_CPU_HEADER
#define FREELSD_KERNEL_CPU_HEADER

#include <interrupts.hpp>
#include <stdint.h>

typedef struct cpuidregisters {
        uint32_t eax;
        uint32_t ebx;
        uint32_t ecx;
        uint32_t edx;
    } cpuid_regs_t;

typedef enum cpuidfeature {
    // Features specified in the ecx register.
    CPU_FEATURE_SSE3    = 0x0000000000000000,
    CPU_FEATURE_PCLMUL  = 0x0000000000000001,
    CPU_FEATURE_DTES64  = 0x0000000000000002,
    CPU_FEATURE_MONITOR = 0x0000000000000004,
    CPU_FEATURE_DSCPL   = 0x0000000000000008,
    CPU_FEATURE_VMX     = 0x0000000000000010,
    CPU_FEATURE_SMX     = 0x0000000000000020,
    CPU_FEATURE_EST     = 0x0000000000000040,
    CPU_FEATURE_TM2     = 0x0000000000000080,
    CPU_FEATURE_SSSE3   = 0x0000000000000100,
    CPU_FEATURE_L1CID   = 0x0000000000000200,
    CPU_FEATURE_SDBG    = 0x0000000000000400,
    CPU_FEATURE_FMA     = 0x0000000000000800,
    CPU_FEATURE_CX16    = 0x0000000000001000,
    CPU_FEATURE_XPTR    = 0x0000000000002000,
    CPU_FEATURE_PDCM    = 0x0000000000004000,
    CPU_FEATURE_PCID    = 0x0000000000010000,
    CPU_FEATURE_DCA     = 0x0000000000020000,
    CPU_FEATURE_SSE41   = 0x0000000000040000,
    CPU_FEATURE_SSE42   = 0x0000000000080000,
    CPU_FEATURE_X2APIC  = 0x0000000000100000,
    CPU_FEATURE_MOVBE   = 0x0000000000200000,
    CPU_FEATURE_POPCNT  = 0x0000000000400000,
    CPU_FEATURE_TSCDLN  = 0x0000000000800000,
    CPU_FEATURE_AES     = 0x0000000001000000,
    CPU_FEATURE_XSAVE   = 0x0000000002000000,
    CPU_FEATURE_OSXSAVE = 0x0000000004000000,
    CPU_FEATURE_AVX     = 0x0000000008000000,
    CPU_FEATURE_F16C    = 0x0000000010000000,
    CPU_FEATURE_RDRND   = 0x0000000020000000,
    CPU_FEATURE_HVISOR  = 0x0000000040000000,

    // Features specified in the edx register.
    CPU_FEATURE_FPU     = 0x1000000000000001,
    CPU_FEATURE_VME     = 0x1000000000000002,
    CPU_FEATURE_DEBUG   = 0x1000000000000004,
    CPU_FEATURE_PSE     = 0x1000000000000008,
    CPU_FEATURE_TSC     = 0x1000000000000010,
    CPU_FEATURE_MSR     = 0x1000000000000020,
    CPU_FEATURE_PAE     = 0x1000000000000040,
    CPU_FEATURE_MCE     = 0x1000000000000080,
    CPU_FEATURE_CX8     = 0x1000000000000100,
    CPU_FEATURE_APIC    = 0x1000000000000200,
    CPU_FEATURE_SEP     = 0x1000000000000800,
    CPU_FEATURE_MTRR    = 0x1000000000001000,
    CPU_FEATURE_PGE     = 0x1000000000002000,
    CPU_FEATURE_MCA     = 0x1000000000004000,
    CPU_FEATURE_CMOV    = 0x1000000000008000,
    CPU_FEATURE_PAT     = 0x1000000000010000,
    CPU_FEATURE_PSE36   = 0x1000000000020000,
    CPU_FEATURE_PSN     = 0x1000000000040000,
    CPU_FEATURE_CLFSH   = 0x1000000000080000,
    CPU_FEATURE_DS      = 0x1000000000200000,
    CPU_FEATURE_ACPI    = 0x1000000000400000,
    CPU_FEATURE_MMX     = 0x1000000000800000,
    CPU_FEATURE_FXSR    = 0x1000000001000000,
    CPU_FEATURE_SSE     = 0x1000000002000000,
    CPU_FEATURE_SSE2    = 0x1000000004000000,
    CPU_FEATURE_SS      = 0x1000000008000000,
    CPU_FEATURE_HTT     = 0x1000000010000000,
    CPU_FEATURE_TM      = 0x1000000020000000,
    CPU_FEATURE_IA64    = 0x1000000040000000,
    CPU_FEATURE_PBE     = 0x1000000080000000
} cpuid_feature_t;

// Executes the CPUID instruction using eax and returns register values in storage.
extern "C" void readcpuid(uint32_t eax, void *storage);

namespace cpu {
    // Generic CPU exception handler.
    void handler(idt::regs64_t *regs);

    // Get the CPU vendor as a string.
    char *getvendor(void);

    // Checks whether the CPU supports a certain feature.
    bool supports(cpuid_feature_t feature);
}

#endif
